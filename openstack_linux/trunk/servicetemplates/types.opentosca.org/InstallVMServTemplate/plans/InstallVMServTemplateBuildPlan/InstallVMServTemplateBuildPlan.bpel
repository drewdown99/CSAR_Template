<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<bpel:process 
	xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" 
	xmlns:bpel4RestLight="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight" 
	
	xmlns:ns1="http://www.w3.org/2001/XMLSchema" 
	xmlns:ns2="http://siserver.org/wsdl" 
	xmlns:ns3="http://docs.oasis-open.org/tosca/ns/2011/12" 
	xmlns:ns4="http://opentosca.org/openTOSCAReferencesSchema" 
	xmlns:tns="http://types.opentosca.org/InstallVMServTemplate/BuildPlan" 
	xmlns:si="http://siserver.org/schema"
	
	name="InstallVMServTemplateBuildPlan" 
	suppressJoinFailure="yes" 
	targetNamespace="http://types.opentosca.org/InstallVMServTemplate/BuildPlan">



	<!-- ================================================================= -->
	<!-- ========================= Extensions ============================ -->
	<!-- ================================================================= -->
	<bpel:extensions>
		<bpel:extension mustUnderstand="yes" namespace="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight"/>
		<bpel:extension mustUnderstand="yes" namespace="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight"/>
	</bpel:extensions>


	<!-- ================================================================= -->
	<!-- ========================== Imports ============================== -->
	<!-- ================================================================= -->
	<bpel:import namespace="http://siserver.org/schema" location="siservice/invoker.xsd" importType="http://www.w3.org/2001/XMLSchema"></bpel:import>
    <bpel:import namespace="http://siserver.org/wsdl" location="siservice/invoker.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>		
	<bpel:import namespace="http://types.opentosca.org/InstallVMServTemplate/BuildPlan" location="InstallVMServTemplateBuildPlanArtifacts.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
	<bpel:import namespace="http://opentosca.org/openTOSCAReferencesSchema" location="openTOSCAXlinkAPIXmlSchema/openTOSCAReferencesSchema.xsd" importType="http://www.w3.org/2001/XMLSchema"/>
	<bpel:import namespace="http://docs.oasis-open.org/tosca/ns/2011/12" location="TOSCA-v1.0-csprd01.xsd" importType="http://www.w3.org/2001/XMLSchema"/>


	<!-- ================================================================= -->
	<!-- ======================== PartnerLinks =========================== -->
	<!-- ================================================================= -->
	<bpel:partnerLinks>		
		<bpel:partnerLink name="client" partnerLinkType="tns:InstallVMServTemplateBuildPlan" myRole="InstallVMServTemplateBuildPlanProvider" partnerRole="InstallVMServTemplateBuildPlanRequester"/>		
		<bpel:partnerLink name="SIInvokerPL" partnerLinkType="tns:SIInvokerPLT" initializePartnerRole="yes" myRole="Requester" partnerRole="Requestee"/>
	</bpel:partnerLinks>

	
	<!-- ================================================================= -->
	<!-- ========================== Variables ============================ -->
	<!-- ================================================================= -->
	<bpel:variables>
	
		<!-- ============================================================= -->
		<!-- Message Variables for main communication PartnerLink "Client" -->
		<!-- ============================================================= -->
		
		<bpel:variable name="input" messageType="tns:InstallVMServTemplateBuildPlanRequestMessage"/>		
		<bpel:variable name="output" messageType="tns:InstallVMServTemplateBuildPlanResponseMessage"/>
		
		
		<!-- ============================================================= -->
		<!-- Message Variables for Service Invoker PartnerLink "SIInvokerPL" -->
		<!-- ============================================================= -->
		
		<bpel:variable name="genericAsynchOperationServiceInvokerRequest" messageType="ns2:invokeOperationAsyncMessage"/>		
		<bpel:variable name="genericAsynchOperationServiceInvokerResponse" messageType="ns2:invokeResponse"/>
		
		<bpel:variable name="policy_invokerSyncRequest" messageType="ns2:invokeOperationSyncMessage" />
		<bpel:variable name="policy_invokerResponse" messageType="ns2:invokeResponse" />
		
				
		<!-- ============================================================= -->		
		<!-- Message Variable for communication with OpenTOSCA InstanceAPI -->
		<!-- ============================================================= -->
		
		<bpel:variable name="genericInstanceAPIResponseMessage" type="ns1:anyType"/>
		
		
		<!-- ============================================================= -->
		<!-- Variable containing Endpoint URL of process instance needed for asynchronous Service Invoker Callback (ReplyTo-Address) -->
		<!-- ============================================================= -->
		
		<bpel:variable name="ownEndpoint" type="ns1:string"/>
		
		
		<!-- ============================================================= -->
		<!-- Variable containing Endpoint URL of Process Requestor needed for asynchronous Callback Invocation -->
		<!-- ============================================================= -->
		
		<bpel:variable name="callbackUrl" type="ns1:string"/>
		
		
		<!-- ============================================================= -->
		<!-- Variables for TOSCA Container Portability API Communication -->
		<!-- ============================================================= -->
		
		<bpel:variable name="CSARName" type="ns1:string"/>
		<bpel:variable name="ContainerURL" type="ns1:string"/>
		<bpel:variable name="csarEntrypointURL" type="ns1:string"/>
		<bpel:variable name="instanceAPIResponse" type="ns1:string"/>
		<bpel:variable name="instanceAPIResponse_Ubuntu" type="ns1:string"/>
		<bpel:variable name="nodeProperties" type="ns1:string"/>
		<bpel:variable name="serviceInstanceURI" type="ns1:string"/>
		<bpel:variable name="nodeInstance_URI" type="ns1:string"/>
		<bpel:variable name="nodeInstance_URI_Ubuntu" type="ns1:string"/>
		<bpel:variable name="OpenTOSCAPortabilityAPIArtifactContainer" type="ns1:anyType" />
		
		<!-- ============================================================= -->				
		<!-- Variables for Amazon Web Services API -->		
		<!-- ============================================================= -->
		
		<bpel:variable name="credentials" type="ns1:string"/>
		<bpel:variable name="endpointsAPI" type="ns1:string"/>
		<bpel:variable name="keypair" type="ns1:string"/>
		<bpel:variable name="minDisk" type="ns1:string"/>
		<bpel:variable name="minRAM" type="ns1:string"/>
		<bpel:variable name="imageName" type="ns1:string"/>
		<bpel:variable name="imageId" type="ns1:string"/>
		<bpel:variable name="flavorId" type="ns1:string"/>
		<bpel:variable name="script" type="ns1:string"/>
				
		
		<!-- ============================================================= -->				
		<!-- Application Specific Variables -->		
		<!-- ============================================================= -->
		
		<bpel:variable name="ApplicationURL" type="ns1:string"/>		
		<bpel:variable name="serverId" type="ns1:string"/>
		<bpel:variable name="floatingIp" type="ns1:string"/>
		<bpel:variable name="privKey" type="ns1:string"/>
		<bpel:variable name="scriptOutput" type="ns1:string"/>
	
    </bpel:variables>


	<!-- ================================================================= -->
	<!-- ======================= Correlation Sets ======================== -->
	<!-- ================================================================= -->
    <bpel:correlationSets>
    
    	<!-- ============================================================= -->
		<!-- Correlation Set for asynchronous Service Invoker Requests -->
		<!-- ============================================================= -->
		

    
    </bpel:correlationSets>
    
    
    <!-- ================================================================= -->
	<!-- ====================== Orchestration Logic ====================== -->
	<!-- ================================================================= -->    
    <bpel:sequence name="main">

		<bpel:receive createInstance="yes" name="ReceiveInput" operation="initiate" partnerLink="client" portType="tns:InstallVMServTemplateBuildPlan" variable="input"/>

		<bpel:sequence name="StandardTasks">
		
			<bpel:sequence name="InputProcessing">
				
				<!-- Process input Message and extract information to Variables -->
				<bpel:assign name="RetrieveInputAndAssign" validate="no">							
			        <bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:csarName]]></bpel:query>
						</bpel:from>
						<bpel:to variable="CSARName"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:containerApi]]></bpel:query>
						</bpel:from>
						<bpel:to variable="ContainerURL"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:callbackUrl]]></bpel:query>
						</bpel:from>
						<bpel:to variable="callbackUrl"/>
					</bpel:copy>			
					<bpel:copy>
						<bpel:from><![CDATA[concat($ContainerURL, "/CSARs/",$CSARName)]]></bpel:from>
						<bpel:to variable="csarEntrypointURL"/>
					</bpel:copy>
				</bpel:assign>
				
				<!-- If csarEntrypointURL ends with a slash remove it -->
				<bpel:if name="csarEntrypointURLCheck">
					<bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ends-with($csarEntrypointURL,'/')]]></bpel:condition>
					<bpel:assign name="deleteLastSlash" validate="no">
						<bpel:copy>
							<bpel:from><![CDATA[substring($csarEntrypointURL,1,string-length($csarEntrypointURL)-1)]]>
							</bpel:from>
							<bpel:to variable="csarEntrypointURL"/>
						</bpel:copy>
					</bpel:assign>
				</bpel:if>
				
				<!-- Initialize all variables that are updated within scopes (ODE BUG) -->
				<bpel:assign>
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="ApplicationURL"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						
						<bpel:to variable="serverId"/>
					</bpel:copy>					
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="floatingIp"/>
					</bpel:copy>					
					 <bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="privKey"/>
					</bpel:copy>					
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="scriptOutput"/>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>
	
			<bpel:sequence name="OutputAndCallbackPreparation">
		
				<!-- Set Callback Endpoint for Main Communication PartnerLink "Client"  -->
				<bpel:assign name="SetCallbackURLToClientPartnerLink" validate="no">
					<bpel:copy>
						<bpel:from><![CDATA[$callbackUrl]]></bpel:from>
						<bpel:to partnerLink="client"></bpel:to>
					</bpel:copy>
				</bpel:assign>
				
				<!-- Prepare Output Message for Main Communication PartnerLink "Client"  -->
				<bpel:assign name="InitializeOutputMessage" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<tns:InstallVMServTemplateResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									 				<tns:selfserviceApplicationUrl>tns:selfserviceApplicationUrl</tns:selfserviceApplicationUrl>                                           
                                                    <tns:selfserviceMessage>tns:selfserviceMessage</tns:selfserviceMessage>                                               
                                                    <tns:selfservicePolicyMessage>tns:selfservicePolicyMessage</tns:selfservicePolicyMessage>                                             
                                                    <tns:selfserviceStatus>tns:selfserviceStatus</tns:selfserviceStatus>                                                   
                                                    <tns:CorrelationID>tns:CorrelationID</tns:CorrelationID>
								</tns:InstallVMServTemplateResponse>
							</bpel:literal>
						</bpel:from>
						<bpel:to part="payload" variable="output"/>
					</bpel:copy>
				</bpel:assign>
		
				<!-- Set CorrelationID in Output Message for Main Communication PartnerLink "Client"  -->        
				<bpel:assign name="SetCorrelationIDForOutputMessage" validate="no">
		    		<bpel:copy>
		                <bpel:from part="payload" variable="input">
		                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:CorrelationID]]></bpel:query>
		                </bpel:from>
		                <bpel:to part="payload" variable="output">
		                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
		                        <![CDATA[tns:CorrelationID]]>
		                    </bpel:query>
		                </bpel:to>
		            </bpel:copy>
				</bpel:assign>
		
				<!-- Set Own-CallbackURL for asynchronous response from PartnerLink "SIInvokerPL"  -->
		        <bpel:assign validate="no" name="ExtractOwnEndpointForServiceInvokerCallback">
            		<bpel:copy>
                		<bpel:from partnerLink="SIInvokerPL" endpointReference="myRole"></bpel:from>
                		<bpel:to variable="ownEndpoint"></bpel:to>
            		</bpel:copy>
        		</bpel:assign>
		
			</bpel:sequence>
	
			<bpel:sequence name="TOSCAContainerAccessPreparation">
			
				<!--  Service Instance URI Retrieval -->        
		        <bpel:sequence name="ServiceInstanceURIRetrieval">
		        		
					<bpel:extensionActivity>
						<bpel4RestLight:POST accept="application/xml" response="genericInstanceAPIResponseMessage" uri="$bpelvar[ContainerURL]/instancedata/serviceInstances?csarID=$bpelvar[CSARName]&amp;serviceTemplateID={http://types.opentosca.org}InstallVMServTemplate"/>
					</bpel:extensionActivity>		
						
					<bpel:assign name="serviceInstanceUriAssign">
						<bpel:copy>
							<bpel:from variable="genericInstanceAPIResponseMessage">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[string(//*[local-name()='link']/@*[local-name()='href'])]]>
								</bpel:query>
							</bpel:from>
							<bpel:to variable="serviceInstanceURI"></bpel:to>
						</bpel:copy>
					</bpel:assign>
				</bpel:sequence>
		
			</bpel:sequence>			

		</bpel:sequence>			

		
<!-- ================================================================================================ -->
<!-- =================================== Provisioning Logic Start =================================== -->
<!-- ================================================================================================ -->  
			
	<bpel:sequence name="MoodleProvisioningLogic">
	
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ==================== Provision Web Server Virtual Machine ============================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Provision Web Server Virtual Machine">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
				
				<bpel:sequence name="NodeInstanceURIRetrieval">        		
						<bpel:extensionActivity>
							<bpel4RestLight:GET
								uri="$bpelvar[ContainerURL]/instancedata/nodeInstances?nodeTemplateID={http://types.opentosca.org}InstallOpenStackVMTemplate&amp;serviceInstanceID=$bpelvar[serviceInstanceURI]"
								accept="application/xml" response="instanceAPIResponse"></bpel4RestLight:GET>
						</bpel:extensionActivity>						
						
					   <bpel:assign name="nodeInstanceUriAssign">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[string(//*[local-name()='link']/@*[local-name()='href'])]]>
								</bpel:query>
							</bpel:from>
							<bpel:to variable="nodeInstance_URI"></bpel:to>
						</bpel:copy>
					   </bpel:assign>
						
					 <bpel:extensionActivity>
						<bpel4RestLight:GET
										uri="$bpelvar[nodeInstance_URI]/properties"
										accept="application/xml" response="instanceAPIResponse"></bpel4RestLight:GET>
					 	</bpel:extensionActivity> 
										
				</bpel:sequence>
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					 <bpel:copy> 
						 <bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>InstallVMServTemplate</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://types.opentosca.org</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>InstallVMServTemplate</impl:ServiceTemplateIDLocalPart> 
									<impl:ReplyTo></impl:ReplyTo>
									<impl:MessageID>1</impl:MessageID>
												
									<impl:NodeTemplateID>InstallOpenStackVMTemplate</impl:NodeTemplateID>
									<impl:InterfaceName>Custom_InstallVM</impl:InterfaceName>
									<impl:OperationName>InstallVMwithGeneratedKeypair</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>credentials</impl:key><impl:value>-</impl:value></impl:Param>
										<impl:Param><impl:key>endpointsAPI</impl:key><impl:value>-</impl:value></impl:Param>
								 		<!-- <impl:Param><impl:key>minDisk</impl:key><impl:value>2</impl:value></impl:Param>
										<impl:Param><impl:key>minRAM</impl:key><impl:value>1000</impl:value></impl:Param> -->								
									 	<impl:Param><impl:key>imageName</impl:key><impl:value>-</impl:value></impl:Param>
										<!-- <impl:Param><impl:key>keypair</impl:key><impl:value>darsana-darsana-ThinkPad-T520</impl:value></impl:Param>
									 	<impl:Param><impl:key>imageId</impl:key><impl:value>5e36592e-6877-438d-b1ce-6858f5b5b34a</impl:value></impl:Param> -->
										<impl:Param><impl:key>flavorId</impl:key><impl:value>-</impl:value></impl:Param>  
									</impl:Params>	
														 
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
					</bpel:assign>						
			
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
 					<bpel:assign name="Set_credentials">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="credentials"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="credentials"]/following-sibling::*[local-name()="value"]]]></bpel:query> 								
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_endpointsAPI">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="endpointsAPI"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="endpointsAPI"]/following-sibling::*[local-name()="value"]]]></bpel:query>  
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
			<!--	    <bpel:assign name="Set_keypair">
						<bpel:copy>
							<bpel:from variable="keypair"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="keypair"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>  
		  		 	<bpel:assign name="Set_imageId">
						<bpel:copy>
							<bpel:from variable="imageId"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="imageId"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>   -->
					<bpel:assign name="Set_flavorId">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="flavorId"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="flavorId"]/following-sibling::*[local-name()="value"]]]></bpel:query>						
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>   			
			  <!--	   <bpel:assign name="Set_minDisk">
						<bpel:copy>
							<bpel:from variable="minDisk"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="minDisk"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
					<bpel:assign name="Set_minRAM">
						<bpel:copy>
							<bpel:from variable="minRAM"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="minRAM"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>		-->		
					<bpel:assign name="Set_imageName">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="imageName"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="imageName"]/following-sibling::*[local-name()="value"]]]></bpel:query>						 
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>									
				</bpel:sequence>  				
				
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>					
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 		
				
					  
				<!-- Process Response and extract information -->				
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="serverId"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>						
						<bpel:to variable="serverId"></bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from variable="serverId"/>							
						<bpel:to variable="instanceAPIResponse">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="serverId"]]]></bpel:query>						 
						</bpel:to>
					</bpel:copy> 
      							
 					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="floatingIp"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="floatingIp"></bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from variable="floatingIp"/>							
						<bpel:to variable="instanceAPIResponse">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="floatingIp"]]]></bpel:query>						 
						</bpel:to>
					</bpel:copy> 					
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="privKey"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="privKey"></bpel:to>
					</bpel:copy> 
					<bpel:copy>
						<bpel:from variable="privKey"/>							
						<bpel:to variable="instanceAPIResponse">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="privKey"]]]></bpel:query>						 
						</bpel:to>
					</bpel:copy> 
				</bpel:assign>		
			    <bpel:extensionActivity>
						<bpel4RestLight:PUT
										uri="$bpelvar[nodeInstance_URI]/properties" accept="application/xml" 
										request="instanceAPIResponse" response="nodeProperties">
						</bpel4RestLight:PUT> 
			    </bpel:extensionActivity> 		
		  </bpel:sequence>			
		</bpel:scope>	
		
		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ==================== Wait for Web Server Operating System ============================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Wait for Web Server Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
				 <bpel:sequence name="NodeInstanceURIRetrieval">        		
						<bpel:extensionActivity>
							<bpel4RestLight:GET
								uri="$bpelvar[ContainerURL]/instancedata/nodeInstances?nodeTemplateID={http://types.opentosca.org}LinuxOperatingSystem&amp;serviceInstanceID=$bpelvar[serviceInstanceURI]"
								accept="application/xml" response="instanceAPIResponse_Ubuntu"></bpel4RestLight:GET>
						</bpel:extensionActivity>						
						
					   <bpel:assign name="nodeInstanceUriAssign">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse_Ubuntu">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[string(//*[local-name()='link']/@*[local-name()='href'])]]>
								</bpel:query>
							</bpel:from>
							<bpel:to variable="nodeInstance_URI_Ubuntu"></bpel:to>
						</bpel:copy>
					   </bpel:assign>
						
					 <bpel:extensionActivity>
						<bpel4RestLight:GET
										uri="$bpelvar[nodeInstance_URI_Ubuntu]/properties"
										accept="application/xml" response="instanceAPIResponse_Ubuntu"></bpel4RestLight:GET>
					 	</bpel:extensionActivity> 
										
				</bpel:sequence> 
					
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>InstallVMServTemplate</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://types.opentosca.org</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>InstallVMServTemplate</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>2</impl:MessageID>
												
									<impl:NodeTemplateID>LinuxOperatingSystem</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>start</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>hostname</impl:key><impl:value>-</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>-</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>-</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>													
				
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="floatingIp"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshUser">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse_Ubuntu">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="sshUser"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="key" and text()="sshUser"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="privKey"]/text()]]></bpel:query>
							</bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  						
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>    
				
				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="pwd"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from variable="instanceAPIResponse">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="floatingIp"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="instanceAPIResponse_Ubuntu">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="hostname"]]]></bpel:query>
						</bpel:to>
					</bpel:copy>	
					<bpel:copy>
						<bpel:from variable="instanceAPIResponse">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="privKey"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="instanceAPIResponse_Ubuntu">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="sshKey"]]]></bpel:query>
						</bpel:to>
					</bpel:copy>						
				</bpel:assign>
				<bpel:extensionActivity>
						<bpel4RestLight:PUT
										uri="$bpelvar[nodeInstance_URI_Ubuntu]/properties" accept="application/xml" 
										request="instanceAPIResponse_Ubuntu" response="nodeProperties">
						</bpel4RestLight:PUT> 
			    </bpel:extensionActivity> 
			</bpel:sequence>		
		</bpel:scope>		
	
	    
	    <!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Prepare APT and Install Packages for Web Server Operating System ========================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Prepare APT and Install Packages for Web Server Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
					
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>InstallVMServTemplate</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://types.opentosca.org</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>InstallVMServTemplate</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>3</impl:MessageID>
												
									<impl:NodeTemplateID>LinuxOperatingSystem</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>runScript</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>script</impl:key><impl:value>uname -a</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>			
													
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse_Ubuntu">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="hostname"]/text()]]></bpel:query>
						    </bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse_Ubuntu">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="sshKey"]/text()]]></bpel:query>
						    </bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
					<bpel:assign name="Set_script">
						<bpel:copy>
							<bpel:from variable="instanceAPIResponse_Ubuntu">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="script"]/text()]]></bpel:query>
						    </bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="script"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="scriptOutput"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="scriptOutput"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
				
	
	<!-- ================================================================= -->
	<!-- ===================== Update Output Message ===================== -->
	<!-- ================================================================= --> 				
		
	<bpel:sequence name="UpdateOutputMessage">		
	
		<!-- Set Application URL -->
		<bpel:assign name="SetApplicationURL" validate="no">
			<bpel:copy>
				<bpel:from><![CDATA[concat("http://",$floatingIp,"/moodle")]]></bpel:from>
				<bpel:to part="payload" variable="output">
					<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:selfserviceApplicationUrl]]></bpel:query>
				</bpel:to>
			</bpel:copy>        
            <bpel:copy>
                <bpel:from><![CDATA[concat("The OpenStack VM has been created with serverId: ", $serverId)]]></bpel:from>
                <bpel:to part="payload" variable="output">
               		 <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:selfserviceMessage]]></bpel:query>
                </bpel:to>
            </bpel:copy>
            <bpel:copy>
                <bpel:from><![CDATA[concat("The script output is: ", "null")]]></bpel:from>
                <bpel:to part="payload" variable="output">
               		 <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:selfservicePolicyMessage]]></bpel:query>
                </bpel:to>
            </bpel:copy>
            <bpel:copy>
                <bpel:from><![CDATA[concat("OK", "")]]></bpel:from>
                <bpel:to part="payload" variable="output">
               		 <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:selfserviceStatus]]></bpel:query>
                </bpel:to>
            </bpel:copy>          
        </bpel:assign>
		
	</bpel:sequence>	
	
	<!-- Send asynchronous Response back to Requestor -->
    <bpel:invoke inputVariable="output" name="callbackClient" operation="onResult" partnerLink="client" portType="tns:InstallVMServTemplateCallback"/>
   
        
</bpel:sequence>
</bpel:sequence>
</bpel:process>
